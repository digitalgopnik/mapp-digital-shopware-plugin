(function(){"use strict";var e={};e.p="bundles/mappconnect/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/mappconnect/"),function(){Shopware.Component.register("mapp-connection-status",{template:'<sw-checkbox-field\n  disabled="disabled"\n  :value="value"\n  :isLoading="isLoading"\n  v-bind="$attrs"\n  v-on="$listeners"\n  :label="label">\n</sw-checkbox-field>\n',inject:["mappconnect"],model:{prop:"value",event:"change"},data(){return{isLoading:!1,label:"Checking..."}},props:{value:{required:!0}},created(){this.isLoading=!0,this.mappconnect.getConnectionStatus().then(e=>{this.isLoading=!1,"OK"!=e.status||(this.label="OK. Connected",this.value||this.$emit("change",!0)),"ERROR"==e.status&&(this.label="ERROR: "+this.error),"NO"==e.status&&(this.label="Not connected")})}}),Shopware.Component.register("mapp-select",{template:'<sw-single-select\n  labelProperty="name"\n  valueProperty="id"\n  :options="options"\n  :value="value"\n  v-bind="$attrs"\n  v-on="$listeners">\n</sw-single-select>\n',inject:["mappconnect"],data(){return{results:[],isLoading:!0}},props:{value:{required:!0},entity:{required:!0}},created(){if(this.isLoading=!0,"group"==this.entity&&this.mappconnect.getGroups().then(e=>{this.isLoading=!0,this.results=e}),"message"==this.entity)return this.mappconnect.getMessages().then(e=>{this.isLoading=!0,this.results=e})},computed:{options(){return this.results}}});let e=Shopware.Classes.ApiService;var t=class extends e{constructor(e,t,n="mappconnect"){super(e,t,n)}getConnectionStatus(){let t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/connection-status`,{headers:t}).then(t=>e.handleResponse(t))}getGroups(){let t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/groups`,{headers:t}).then(t=>e.handleResponse(t))}getMessages(){let t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/messages`,{headers:t}).then(t=>e.handleResponse(t))}};let n=Shopware.Utils.string.snakeCase,{Component:a,Mixin:s,Data:{Criteria:i}}=Shopware;a.register("mapp-event-config-list",{template:'<sw-page>\n    <template #search-bar>\n        <sw-search-bar\n            initialSearchType="event_action"\n            placeholder="Search"\n            :initialSearch="term"\n            @search="onSearch">\n        </sw-search-bar>\n    </template>\n\n    <template #smart-bar-header>\n        <h2>\n            MappConnect Business Events\n            <span v-if="total > 0"> ({{ total }})</span>\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button\n            :routerLink="{ name: \'mapp.event.config.create\' }"\n            variant="primary">\n            Add Event\n        </sw-button>\n    </template>\n\n    <template #content>\n        <sw-entity-listing\n            :repository="mappEventRepository"\n            :columns="mappEventColumns"\n            :items="items"\n            :sortBy="sortBy"\n            :sortDirection="sortDirection"\n            :isLoading="isLoading"\n            :allowInlineEdit="false"\n            detailRoute="mapp.event.config.detail"\n            >\n\n            <template #column-eventName="{ item, column }">\n                <strong>\n                    <router-link :to="{ name: column.routerLink, params: { id: item.id } }">\n                        {{ $tc(\'global.businessEvents.\' + snakeCaseEventName(item.eventName)) }}\n                    </router-link>\n                </strong><br>\n                {{ item.eventName }}\n            </template>\n\n            <template #column-salesChannels="{ item, isInlineEdit }">\n                <sw-event-action-list-expand-labels\n                    :items="item.salesChannels"\n                    :disabled="isInlineEdit">\n                </sw-event-action-list-expand-labels>\n            </template>\n\n            <template #column-rules="{ item, isInlineEdit }">\n                <sw-event-action-list-expand-labels\n                    :items="item.rules"\n                    :disabled="isInlineEdit">\n                </sw-event-action-list-expand-labels>\n            </template>\n\n            <template #column-active="{ item, isInlineEdit }">\n                <sw-data-grid-column-boolean\n                    v-model="item.active"\n                    :isInlineEdit="isInlineEdit">\n                </sw-data-grid-column-boolean>\n            </template>\n        </sw-entity-listing>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],mixins:[s.getByName("listing")],metaInfo(){return{title:this.$createTitle()}},data(){return{items:null,sortBy:"eventName",sortDirection:"ASC",isLoading:!1,total:0}},computed:{mappEventRepository(){return this.repositoryFactory.create("mapp_event")},mappEventCriteria(){let e=new i;if(e.setTerm(null),this.term){let t=this.term.split(" ");["eventName","messageId"].forEach(n=>{t.forEach(t=>{t.length>1&&e.addQuery(i.contains(n,t),500)})})}return e.addAssociation("salesChannels"),e.addSorting(i.sort(this.sortBy,this.sortDirection)),e},mappEventColumns(){return[{property:"eventName",dataIndex:"eventName",label:"Event Name",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0,primary:!0},{property:"title",dataIndex:"title",label:"Title",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0},{property:"messageId",dataIndex:"messageId",label:"Mapp MessageId",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0},{property:"salesChannels",dataIndex:"salesChannels",label:"Sales Channel",sortable:!1,allowResize:!0,multiLine:!0},{property:"active",dataIndex:"active",label:"Active",align:"center",allowResize:!0}]}},methods:{getList(){return this.isLoading=!0,this.mappEventRepository.search(this.mappEventCriteria,Shopware.Context.api).then(e=>{this.items=e,this.total=e.total,this.isLoading=!1})},snakeCaseEventName(e){return n(e)}}});let r=Shopware.Utils.string.snakeCase,{Component:p,Utils:o,Mixin:l,Data:{Criteria:m},Classes:{ShopwareError:c}}=Shopware,{mapPropertyErrors:d}=Shopware.Component.getComponentHelper();p.register("mapp-event-config-detail",{template:'<sw-page class="sw-event-action-detail">\n    <template #smart-bar-header>\n          <h2>{{ identifier }}</h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button :routerLink="{ name: \'mapp.event.config.index\' }">\n              {{ $tc(\'global.default.cancel\') }}\n        </sw-button>\n\n        <sw-button-process\n              :isLoading="isLoading"\n              :processSuccess="isSaveSuccessful"\n              variant="primary"\n              @update:processSuccess="saveFinish"\n              :disabled="isLoading"\n              @click.prevent="onSave">\n              {{ $tc(\'sw-product.detail.buttonSave\') }}\n        </sw-button-process>\n    </template>\n\n    <template #content>\n        <sw-card-view>\n            <sw-card :isLoading="isLoading">\n                <sw-container columns="75% 1fr" gap="30px">\n                    <sw-text-field\n                        v-if="mappEvent"\n                        type="text"\n                        label="Title"\n                        placeholder=""\n                        v-model="mappEvent.title"\n                        @update:value="onEventTitleUpdate">\n                        >\n                    </sw-text-field>\n                    <sw-switch-field\n                        v-if="mappEvent"\n                        label="Active"\n                        v-model="mappEvent.active"\n                        bordered\n                        @update:value="onEventActiveUpdate">\n                    </sw-switch-field>\n                </sw-container>\n\n\n                <sw-single-select\n                    v-if="mappEvent && businessEvents"\n                    label="Business Event"\n                    :options="businessEvents"\n                    v-model="mappEvent.eventName"\n                    required\n                    labelProperty="label"\n                    valueProperty="name"\n                    @update:value="onEventNameUpdate">\n\n                    <template #selection-label-property="{ item }">\n                        <strong>{{ item.label }}</strong> - {{ item.name }}\n                    </template>\n\n                    <template #result-label-property="{ item, highlightSearchTerm, labelProperty, searchTerm }">\n                        <strong>\n                            <sw-highlight-text\n                                :text="item.label"\n                                :searchTerm="searchTerm">\n                            </sw-highlight-text>\n                        </strong>\n                        {{ item.name }}\n                    </template>\n                </sw-single-select>\n\n                <sw-entity-multi-select\n                    v-if="mappEvent"\n                    label="Sales Channel"\n            \n                    >\n                </sw-entity-multi-select>\n\n                <mapp-select\n                    v-if="mappEvent"\n                    label="Message"\n                    entity="message"\n                    v-bind:value="mappEvent.messageId"\n                    v-on:change="mappEvent.messageId = $event"\n                    @update:value="mappEvent.messageId = $event"\n                    >\n                </mapp-select>\n\n            </sw-card>\n        </sw-card-view>\n    </template>\n</sw-page>\n',inject:["repositoryFactory","businessEventService"],mixins:[l.getByName("notification")],props:{mappEventId:{type:String,required:!1,default:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},watch:{mappEventId(){this.loadData()}},data(){return{businessEvents:null,mappEvent:null,isLoading:!1,recipients:[],isSaveSuccessful:!1}},computed:{...d("mappEvent",["eventName"]),mappEventRepository(){return this.repositoryFactory.create("mapp_event")},mappEventCriteria(){let e=new m;return e.addAssociation("salesChannels"),e},identifier(){return this.mappEvent&&this.mappEvent.eventName?this.$tc(`global.businessEvents.${r(this.mappEvent.eventName)}`):"New MappConnect Business Event"}},created(){this.createdComponent()},methods:{createdComponent(){this.loadData()},loadData(){return this.isLoading=!0,Promise.all([this.getBusinessEvents(),this.getMappEvent()]).then(([e,t])=>(this.businessEvents=this.addTranslatedEventNames(e),this.mappEvent=t,console.log({mappEvent:t}),this.isLoading=!1,Promise.resolve([e,t]))).catch(e=>(this.createNotificationError({message:e}),this.isLoading=!1,Promise.reject(e)))},getMappEvent(){if(!this.mappEventId){let e=this.mappEventRepository.create(Shopware.Context.api);return e.eventName="",e.active=!1,e}return this.mappEventRepository.get(this.mappEventId,Shopware.Context.api,this.mappEventCriteria)},onEventNameUpdate(e){this.mappEvent.eventName=e},onEventTitleUpdate(e){this.mappEvent.title=e},onEventActiveUpdate(e){this.mappEvent.active=e},getBusinessEvents(){return this.businessEventService.getBusinessEvents()},addTranslatedEventNames(e){return e.map(e=>{let t=r(e.name);return{...e,label:this.$tc(`global.businessEvents.${t}`)}})},onSave(){return this.isLoading=!0,this.mappEventRepository.save(this.mappEvent,Shopware.Context.api).then(()=>(this.mappEvent.isNew()?this.$router.push({name:"mapp.event.config.detail",params:{id:this.mappEvent.id}}):(this.loadData(),this.isSaveSuccessful=!0),Promise.resolve(this.mappEvent))).catch(e=>(this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),this.isLoading=!1,Promise.reject(e)))},saveFinish(){this.isSaveSuccessful=!1},snakeCaseEventName(e){return r(e)}}}),Shopware.Module.register("mapp-event-config",{type:"plugin",name:"mapp-event-config",title:"Mapp Connect Events",description:"",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",favicon:"icon-module-settings.png",entity:"mapp_event",routes:{index:{component:"mapp-event-config-list",path:"index"},detail:{component:"mapp-event-config-detail",path:"detail/:id",props:{default:e=>({mappEventId:e.params.id})},meta:{parentPath:"mapp.event.config.index"}},create:{component:"mapp-event-config-detail",path:"create",meta:{parentPath:"mapp.event.config.index"}}},settingsItem:[{to:"mapp.event.config.index",group:"plugins",icon:"default-action-settings"}]}),Shopware.Service().register("mappconnect",e=>new t(Shopware.Application.getContainer("init").httpClient,e.loginService))}()})();